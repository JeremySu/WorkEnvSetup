" ======My own KEY=======
" \q   toggle auto indent
" <F4> list all calls function          //cscope
" <F8> Nerdtree toggle
" <F6> Tagbar toggle                    //exuberant-ctags
" <F11> gen cscope file & connect to it //cscope
" <F7> cscope jump to file              //cscope

" =======COMMAND=============
" :cs f f RegEx   (Find file)
" :cs f e RegEx   (Find any string that conatin RegEx)

" ======motion=======
" [[ : to function head
" { : to previous blank line
" g* : search word without \<\>

" ============vimdiff===============
" ]c        : next diff
" za        : toggle current fold
" zi        : toggle ALL fold

" ============Pathogen vim plugin managment==================
call pathogen#infect()
call pathogen#helptags()

" General
set nocompatible
set diffopt+=vertical
set mouse=""
syntax on

" Relate file type
filetype plugin on
set ofu=syntaxcomplete#Complete
set wildignore=*.o,*.obj,*.exe,*.so,*.lo,*.a
set ff=unix

" Performance
set lazyredraw

" Backup
set nobackup
set nowb
set noswapfile

" Search
set ignorecase
set smartcase
set incsearch
set hlsearch

" Error alarm
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Tab and space
set expandtab
set smarttab
set tabstop=4
set shiftwidth=4

" Display
set showmatch
set wildmenu
set nowrap
set nonu
set tabpagemax=50
set t_Co=256
set autoread
set cursorline
hi CursorLine cterm=none
highlight LineNr cterm=NONE ctermfg=darkgrey ctermbg=NONE
colorscheme molokai

set bs=2
set ai
set tw=80
set modifiable
set winminheight=0

" Status bar
set laststatus=2
set statusline=%4*%<\ %1*[%F]
set statusline+=[%{FileSize()}]%m " file size
set statusline+=%4*%=\ %6*%y%4*\ %3*%l%4*,\ %3*%c%4*\ \<%2*%p%%%4*\>
highlight User1 ctermfg=red
highlight User2 term=underline cterm=underline ctermfg=green
highlight User3 term=underline cterm=underline ctermfg=yellow
highlight User4 term=underline cterm=underline ctermfg=white
highlight User5 ctermfg=cyan
highlight User6 ctermfg=white

" Calculate file siace
function! FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
    else
        return (bytes / 1024) . "k"
    endif
endfunction

" Menu color scheme
highlight Pmenu ctermbg=239 ctermfg=247
highlight PmenuSel ctermbg=239 ctermfg=123
highlight PmenuSbar ctermbg=darkblue
highlight PmenuThumb ctermfg=gray

" Custom key mapping

nmap <SPACE> :nohlsearch<cr>

""" keep selection after indenting/dedenting
""xnoremap < <gv
""xnoremap > >gv
""
""if version >= 700
""    " map  <C-x> :mak<cr>
""
""    " vim tab manipulation
""    map  <C-c> :tabnew<CR>
""    map <C-h> :tabprev<CR>
""    map <C-l> :tabnext<CR>
""end
""
""" disable arrow keys in normal/insert mode,
""" noremap <Up> <nop>
""" noremap <Down> <nop>
""" noremap <Left> <nop>
""" noremap <Right> <nop>
""" inoremap <Up> <nop>
""" inoremap <Down> <nop>
""" inoremap <Left> <nop>
""" inoremap <Right> <nop>
""
""" disable backspace
""" map <BS> <nop>
""" map! <BS> <nop>
""
""" disbale hjkl arrow movement
""" noremap h <nop>
""" noremap j <nop>
""" noremap k <nop>
""" noremap l <nop>
""
""" ========map the %% in Ex to current editing file's path ===========
""cnoremap <expr> %% getcmdtype( ) == ':' ?expand('%:h').'/' : '%%'
""
""" ctrl+j / ctrl+k can move the edit screen up/down
""function! s:Saving_scroll(cmd)
""  let save_scroll = &scroll
""  execute 'normal! ' . a:cmd
""  let &scroll = save_scroll
""endfunction
""nnoremap <C-J> :call <SID>Saving_scroll("1<C-V><C-D>")<CR>
""vnoremap <C-J> <Esc>:call <SID>Saving_scroll("gv1<C-V><C-D>")<CR>
""nnoremap <C-K> :call <SID>Saving_scroll("1<C-V><C-U>")<CR>
""vnoremap <C-K> <Esc>:call <SID>Saving_scroll("gv1<C-V><C-U>")<CR>
""
""" Quickfix window toggle
""command -bang -nargs=? QFix call QFixToggle(<bang>0)
""function! QFixToggle(forced)
""    if exists("g:qfix_win") && a:forced == 0
""        cclose
""        unlet g:qfix_win
""    else
""        botright copen 7
""        set nornu
""        set nu
""        let g:qfix_win = bufnr("$")
""    endif
""endfunction
""nmap <F3> :QFix<CR>
""
""
""" *****************************************************
""" ***** VIM PLUGIN & EXTERNAL EXE SETTING/MAPPING *****
""" *****************************************************
""
""" ================bazel file commentary config=============
""autocmd FileType bazel setlocal commentstring=#\ %s
""
""" ===============Nerdtree toggle==============
""nmap <F8> :NERDTreeToggle<CR>
""
""" ================Tagbar toggle==================
""nmap <F6> :TagbarToggle<CR>
""

" Automate install vim plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" vim-go setting
call plug#begin()
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
call plug#end()
